import "std.um"

type Instr = struct {
    op: str
    args: []int
}

type Parser = struct {
    s: str
    i: int
}

fn (p: ^Parser) peek(): char {
    if p.i >= len(p.s) {
        return '\0'
    }
    return p.s[p.i]
}

fn (p: ^Parser) try(s: str): bool {
    init := p.i
    for i, c in s {
        if p.peek() != c {
            p.i = init
            return false
        }

        p.i++
    }

    return true
}

fn (p: ^Parser) parsenum(): (int, bool) {
    num := 0
    ok := false
    for p.peek() >= '0' && p.peek() <= '9' {
        num = num*10 + int(int(p.peek()) - int('0'))
        p.i++
        ok = true
    }

    return num, ok
}

fn tryparse(p: ^Parser): (Instr, bool) {
    if p.try("mul(") {
        num, ok := p.parsenum()
        if !ok { return {}, false }
        if p.peek() != ',' { return {}, false }
        p.i++

        num2, ok := p.parsenum()
        if !ok { return {}, false }
        if p.peek() != ')' { return {}, false }
        p.i++

        return {op: "mul", args: {num, num2}}, true
    } else if p.try("don't()") {
        return {op: "don't"}, true
    } else if p.try("do()") {
        return {op: "do"}, true
    }

    return {}, false
}

fn main() {
    data := ""

    for c := std::getchar(); c != '\0'; c = std::getchar() {
        data += c
    }

    instrs := []Instr{}
    parser := Parser{data, 0}
    for parser.peek() != '\0' {
        instr, ok := tryparse(&parser)
        if ok {
            instrs = append(instrs, instr)
        } else {
            parser.i++
        }
    }

    part1 := 0
    part2 := 0

    do := true
    for i, instr in instrs {
        if instr.op == "mul" {
            part1 += instr.args[0] * instr.args[1]
            if do { part2 += instr.args[0] * instr.args[1] }
        } else if instr.op == "do" {
            do = true
        } else if instr.op == "don't" {
            do = false
        }
    }

    printf("Part 1: %v\n", part1)
    printf("Part 2: %v\n", part2)
}